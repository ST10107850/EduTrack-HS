import React, { useEffect, useState } from 'react';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Pie } from 'react-chartjs-2';

ChartJS.register(ArcElement, Tooltip, Legend);

interface PieChartProps {
  students: number;
  teachers: number;
  parents: number;
}

const PieChart: React.FC<PieChartProps> = ({ students, teachers, parents }) => {
  const [chartData, setChartData] = useState<{ labels: string[]; datasets: any[] }>({
    labels: ['Students', 'Teachers', 'Parents'],
    datasets: [
      {
        label: 'Population',
        data: [students, teachers, parents],
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
        ],
        borderWidth: 1,
      },
    ],
  });

  useEffect(() => {
    if (isNaN(students) || isNaN(teachers) || isNaN(parents)) {
      console.error('Invalid data: Please provide valid numbers for students, teachers, and parents.');
      return;
    }

    setChartData({
      ...chartData,
      datasets: [
        {
          ...chartData.datasets[0],
          data: [students, teachers, parents],
        },
      ],
    });
  }, [students, teachers, parents]);

  return (
    <div className="w-full h-96">
      {chartData.datasets && chartData.datasets.length > 0 ? (
        <Pie data={chartData} />
      ) : (
        <p>Error: Invalid chart data.</p>
      )}
    </div>
  );
};

export default PieChart;